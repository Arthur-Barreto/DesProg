QuestÃ£o 1
---------

iteracao 1: 7 = (0+15)/2
iteracao 2: 3 = (0+6)/2
iteracao 3: 1 = (0+2)/2
iteracao 4: 2 = (2+2)/2

QuestÃ£o 2
---------

bubble sort
3 1 2 4 5
1 2 3 4 5
1 2 3 4 5

selection sort
1 3 5 2 4
1 2 5 3 4
1 2 3 5 4
1 2 3 4 5

insertion sort
3 5 1 2 4
1 3 5 2 4
1 2 3 5 4
1 2 3 4 5


QuestÃ£o 3a
----------

final da iteração 1: i = 0, j = 4
final da iteração 2: i = 1, j = 4
final da iteração 3: i = 2, j = 4
final da iteração 4: i = 2, j = 5
final da iteração 5: i = 3, j = 5
final da iteração 6: i = 3, j = 6

QuestÃ£o 3b
----------

final da iteração 1: p = 1, v = 3 5 6 2 1 4
final da iteração 2: p = 1, v = 3 5 6 2 1 4
final da iteração 3: p = 1, v = 3 5 6 2 1 4
final da iteração 4: p = 2, v = 3 2 6 5 1 4
final da iteração 5: p = 3, v = 3 2 1 5 6 4

QuestÃ£o 4
---------

Quantidade de iterações do loop externo (x):
-------------------------------------------
Contador começa em 4, soma 4 enquanto for menor que 5n.

Depois de x-1 iterações, a condição ainda vale.
4 + 4(x-1) < 5n
4 + 4x - 4 < 5n
4x < 4n
x < n

x = O(n), ou seja, x <= c_x n

Quantidade de iterações do loop interno (y):
-------------------------------------------
Contador começa de 3 e multiplica por 3 enquanto for menor que 5i.

Depois de y-1 iterações, a condição ainda vale.
3 * 3^(y-1) < 5i
3^(y-1) < (5i)/3
y-1 < log3((5i)/3)
y < 1 + log3((5i)/3)

y = O(log i), ou seja, y <= c_y log i


Valor de i ao longo do loop externo:
-----------------------------------
i = 4, 8, 12, ..., 4 + 4(x-1)


Limitante para as iterações de todas as execuções do loop interno:
-----------------------------------------------------------------
   c_y (log 4 + log 8 + log 12 + ... + log (4+4(x-1)))

Soma de logaritmos de PA

<= c_y c x log x

Como x <= c_x n, pelas regras de simplificação
podemos concluir que a complexidade é O(n log n).

QuestÃ£o 5
---------

         /
        | 1             se n <= 1;
f(n) = <
        | f(n/5) + n    se n > 1.
         \


Tamanho n divide por 5 a cada andar enquanto for maior que 1.
No antepenúltimo andar (h-2), ainda não chegamos na base.
n / 5^(h-2) > 1
n > 5^(h-2)
5^h < n*25

5^h = O(n), ou seja, 5^h <= c_x n

Ao longo dos andares, temos
(n + n/5 + n/25 + ... + n(1/5)^(h-2)) + 2^(h-1)

Soma infinita
- primeiro elemento n
- razão 1/3

 < n / (1 - 1/3) + 5^(h-1)
 = n / (2/3) + 5^(h-1)
 = 3n/2 + 5^(h-1)
 = 3n/2 + 5^h / 2^1
 = 3n/2 + 5^h / 2
 = 3n/2 + (5^h)^(log5 2) / 2

Como 5^h <= c_x n

<= 3n/2 + n^(log5 2) / 2

Como log5 2 < 1, a complexidade é O(n).

QuestÃ£o 6
---------

Quantidade de iterações do loop externo (x):
-------------------------------------------
Contador começa de 4 e multiplica por 5 enquanto for menor que 2n.

Depois de x-1 iterações, a condição ainda vale.
4 * 5^(x-1) < 2n
5^(x-1) < n/2
5^x / 5^1 < n / 2
5^x < (5n)/2 

5^x = O(n), ou seja, 5^x <= c_x n


Quantidade de iterações do loop interno (y):
-------------------------------------------
Contador começa de 4 e aumenta em 3 enquanto for menor que 4i.

Depois de y-1 iterações, a condição ainda vale.
4 + 3(y-1) < 4i
4 + 3y - 3 < 4i
3y + 1 < 4i
y < (4i-1)/3

y = O(i), ou seja, y <= c_y i


Valor de i ao longo do loop externo:
-----------------------------------
i = 4, 20, 100, ..., 4 * 5^(x-1)


Limitante para as iterações de todas as execuções do loop interno:
-----------------------------------------------------------------
  c_y (4 + 20 + 100 + ... + (4*5^(x-1)))

Soma de PG
- primeiro elemento 4
- razão 5
- número de elementos x

= c_y 4 (5^x - 1) / (5 - 1)
= c_y 4 (5^x - 1) / 4
= c_y (5^x - 1)

Como 5^x <= c_x n, pelas regras de simplificação
podemos concluir que a complexidade é O(n).

QuestÃ£o 7
---------

Como a velocidade é importante, vamos considerar a recomendação de tempo na
prática. Como há grande volume de microdados, vamos especificamente considerar a
recomendação para vetores grandes.

Vamos então considerar a complexidade de tempo. Como há grande volume de microdados, o
vetor é grande o suficiente para a complexidade ser um critério confiável.

Por fim, como os estudos sugerem que não há uma ordem aparente, o algoritmo mais
indicado é o QUICK SORT.

O algoritmo não é o melhor em relação a complexidade de memória adicional, mas
não chega a exigir memória diretamente proporcional ao tamanho do vetor.
Portanto, essa exigência está dentro do aumento de memória do dispositivo que a
empresa considera aceitável.

QuestÃ£o 8
---------

Como a velocidade é importante, vamos considerar a recomendação de tempo na
prática. Como os usuarios fazem treinos continuos, ao longo de vários anos,
vamos especificamente considerar a recomendação para vetores grandes.

Por fim, como as estatísticas de treinos anteriores sugerem um vetor quase
ou totalmente crescente, o algoritmo mais indicado é o INSERTION SORT.

Ele também garante baixo consumo de memória adicional, conforme exigido. Embora a
estabilidade não tenha sido mencionada, o algoritmo também garante a mesma.